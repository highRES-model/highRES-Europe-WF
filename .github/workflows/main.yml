name: Build on Ubuntu

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  # push:
  #  branches: [ "main" ]
  pull_request:
  #  branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env: 
  gamsversion: "50.5.0"
  # Only works in one place and need to be hardcodes in two places as of 25 June 2025. 

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: Cache shared input
        id: cache-shared-inputs-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            shared_input
            resources
          key: shared_inputs-${{ hashFiles('shared_input', 'resources') }}

      - name: Install bsdtar tool
        if: steps.cache-shared-inputs-restore.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install libarchive-tools

      - name: Setup micromamba
        uses: mamba-org/setup-micromamba@v2
        with:
          micromamba-version: latest
          environment-file: workflow/envs/highres_environment.yaml
          # log-level: debug
          init-shell: bash
          cache-environment: true
          cache-downloads: true

      - name: Download Zenodo
        if: steps.cache-shared-inputs-restore.outputs.cache-hit != 'true'
        run: |
          eval "$(micromamba shell hook --shell bash)"
          micromamba activate highres
          zenodo_get -R 5 10.5281/zenodo.14223617 # R5 because downloads sometimes fail

      - name: Extract Zenodo
        if: success() && steps.cache-shared-inputs-restore.outputs.cache-hit != 'true' # success to not do this step if any of the previous have failed
        run: |
          bsdtar -xvf resources.zip
          bsdtar -xvf geodata.zip
          bsdtar -xvf weatherdata.zip
          rm resources.zip geodata.zip weatherdata.zip

      - name: Create shared_input
        if: success() && steps.cache-shared-inputs-restore.outputs.cache-hit != 'true'
        run: |
          mkdir shared_input
          mv geodata shared_input
          mv weatherdata shared_input

      - name: Always save shared input
        id: cache-shared-inputs-save
        if: success() && steps.cache-shared-inputs-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          key: ${{ steps.cache-shared-inputs-restore.outputs.cache-primary-key }}
          path: |
            shared_input
            resources

      - name: Cache GAMS
        id: cache-gams-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            /opt/gams
          key: ${{ runner.os }}-gams

      - name: Install GAMS
        if: steps.cache-gams-restore.outputs.cache-hit != 'true'
        run: |
          pwd
          sudo apt-get update
          sudo apt-get install wget curl
          cd ~
          pwd
          wget https://d37drm4t2jghv5.cloudfront.net/distributions/$gamsversion/linux/linux_x64_64_sfx.exe
          chmod 755 linux_x64_64_sfx.exe
          sudo mkdir /opt/gams
          cd /opt/gams
          pwd
          ~/linux_x64_64_sfx.exe
          cd ~
          pwd
          ls /opt/gams/gams50.5_linux_x64_64_sfx

      # Courtesy of PyPSA-EUR
      #- name: Setup secrets
      #  run: |
      #    echo -ne "url: ${CDSAPI_URL}\nkey: ${CDSAPI_TOKEN}\n" > ~/.cdsapirc

      - name: Always Cache GAMS
        id: cache-gams-save
        if: always() && steps.cache-gams-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          key: ${{ steps.cache-gams-restore.outputs.cache-primary-key }}
          path: |
            /opt/gams

      # Courtesy of PyPSA-EUR
      - name: Setup GAMS license
        env:
          GAMS_ACCESS_CODE: ${{ secrets.GAMS_ACCESS_CODE }}
        run: |
          sudo /opt/gams/gams50.5_linux_x64_64_sfx/gamsgetkey $GAMS_ACCESS_CODE -o /opt/gams/gams50.5_linux_x64_64_sfx/gamslice.txt

      - name: Test snakemake workflow
        run: |
          eval "$(micromamba shell hook --shell bash)"
          micromamba activate highres
          snakemake -c all --configfile=config/config_ci.yaml

      - name: Archive log files
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: |
            .snakemake/log/*.log
            work/BASE_2010_region/highres.log
            work/BASE_2010_region/highres.lst
            work/BASE_2010_region/test_log
      
      - name: Archive results
        uses: actions/upload-artifact@v4
        with:
          name: results
          path: |
            work/BASE_2010_region/results.db

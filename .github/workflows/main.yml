name: Build on Ubuntu

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  # push:
  #  branches: [ "main" ]
  pull_request:
  #  branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: Cache shared input
        id: cache-shared-inputs
        uses: actions/cache@v4
        with:
          path: |
            shared_input
          key: shared_inputs

      - name: Cache resources folders
        id: cache-resources
        uses: actions/cache@v4
        with:
          path: |
            resources
          key: resources
      
      - name: Cache GAMS
        id: cache-gams
        uses: actions/cache@v4
        with:
          path: |
            /opt/gams
          key: ${{ runner.os }}-gams

      - name: Install GAMS
        if: steps.cache-gams.outputs.cache-hit != 'true'
        run: |
          pwd
          sudo apt-get update
          sudo apt-get install wget curl
          cd ~
          pwd
          wget https://d37drm4t2jghv5.cloudfront.net/distributions/46.5.0/linux/linux_x64_64_sfx.exe
          chmod 755 linux_x64_64_sfx.exe
          sudo mkdir /opt/gams
          cd /opt/gams
          pwd
          ~/linux_x64_64_sfx.exe
          cd ~
          pwd
          ls /opt/gams/gams46.5_linux_x64_64_sfx

      # Courtesy of PyPSA-EUR
      #- name: Setup secrets
      #  run: |
      #    echo -ne "url: ${CDSAPI_URL}\nkey: ${CDSAPI_TOKEN}\n" > ~/.cdsapirc

      # Courtesy of PyPSA-EUR
      - name: Setup GAMS license
        env:
          GAMS_LICENSE: ${{ secrets.GAMS_LICENSE }}
        run: |
          sudo -i
          echo $GAMS_LICENSE | base64 --decode > /opt/gams/gams46.5_linux_x64_64_sfx/gamslice.txt

      - name: Setup micromamba
        uses: mamba-org/setup-micromamba@v1
        with:
          micromamba-version: latest
          environment-file: workflow/envs/highres_environment.yaml
          # log-level: debug
          init-shell: bash
          cache-environment: true
          cache-downloads: true

      - name: Download & Extract resources
        if: steps.cache-resources.outputs.cache-hit != 'true'
        run: |
          mkdir -p resources
          curl -L -b cookies.txt "https://zenodo.org/records/14223618/files/resources.zip?download=1" -o resources.zip && unzip -d resources resources.zip
          
      - name: Download & Extract shared_input
        if: steps.cache-shared-inputs.outputs.cache-hit != 'true'
        run: |
          mkdir -p shared_input
          curl -L -b cookies.txt "https://zenodo.org/records/14223618/files/shared_input.zip?download=1" -o shared_input.zip && unzip -d shared_input shared_input.zip
          # Move contents up if nested
          mv shared_input/shared_input/* shared_input/ || true
          rm -r shared_input/shared_input || true
        
      - name: Test snakemake workflow
        run: |
          eval "$(micromamba shell hook --shell bash)"
          micromamba activate highres
          snakemake -c all
      
      - name: Archive log files
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: |
            .snakemake/log/*.log
            work/models/2010/region/highres.log
            work/models/2010/region/highres.lst
      
      - name: Archive results
        uses: actions/upload-artifact@v4
        with:
          name: results
          path: |
            work/models/2010/region/results.db
